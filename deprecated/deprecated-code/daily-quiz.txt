daily-quiz.js
 //Do something with a database lookup with user. For now, this is still just calling Mockaroo.
  // axios
  //   .get('https://my.api.mockaroo.com/flashcards.json?key=6b3bc3e0')
  //   .then((apiResponse) => res.json(apiResponse.data)) // pass data along directly to client
  //   .catch((err) => {
  //     // the server returned an error... probably too many requests... until we pay!

  //     // make some backup fake data
  //     const backupData = [
  //       {
  //         term: 'encryption',
  //         definition:
  //           'adipiscing elit proin risus praesent lectus vestibulum quam sapien varius ut blandit'
  //       },
  //       {
  //         term: 'instruction set',
  //         definition:
  //           'convallis nunc proin at turpis a pede posuere nonummy integer non velit donec diam'
  //       },
  //       {
  //         term: 'contingency',
  //         definition:
  //           'elementum pellentesque quisque porta volutpat erat quisque erat eros viverra eget congue'
  //       },
  //       {
  //         term: 'Sharable',
  //         definition:
  //           'vivamus tortor duis mattis egestas metus aenean fermentum donec ut mauris eget massa'
  //       },
  //       {
  //         term: 'User-friendly',
  //         definition:
  //           'praesent blandit nam nulla integer pede justo lacinia eget tincidunt eget tempus'
  //       },
  //       {
  //         term: 'executive',
  //         definition: 'sed tristique in tempus sit amet sem fusce consequat nulla nisl nunc nisl'
  //       },
  //       {
  //         term: 'model',
  //         definition: 'elit proin interdum mauris non ligula pellentesque ultrices phasellus id'
  //       },
  //       {
  //         term: 'Ergonomic',
  //         definition:
  //           'massa quis augue luctus tincidunt nulla mollis molestie lorem quisque ut erat curabitur gravida nisi'
  //       },
  //       {
  //         term: 'intangible',
  //         definition:
  //           'porttitor id consequat in consequat ut nulla sed accumsan felis ut at dolor quis'
  //       },
  //       {
  //         term: 'challenge',
  //         definition: 'luctus rutrum nulla tellus in sagittis dui vel nisl duis ac'
  //       }
  //     ];
  //     res.json(backupData);
  //   });
  (answers.map) line 102 ish
  //   for (i=0; i<history.length; i++){
        //     if (history[i].term === answer.term){
        //       //Case where the term is already in the history, and we got it correct
        //       if (answer.correctness){
        //         let newHistory = history
        //         newHistory[i] = {
        //           term: history[i].term,
        //           right: history[i].right + 1,
        //           wrong: history[i].wrong,
        //           percent_correct: (history[i].right+1)/(history[i].right+history[i].wrong+1),
        //           set_id: history[i].set_id
        //         }
        //         User.findOneAndUpdate({username:req.headers.username},
        //           {history: newHistory},
        //           {new:true}).then((us)=>{
        //             console.log(us)
        //           })
        //         found = true
        //       }
        //       //Case where the term is already in the history, and we got it incorrect
        //       else{
        //         let newHistory = history
        //         newHistory[i] = {
        //           term: history[i].term,
        //           right: history[i].right,
        //           wrong: history[i].wrong+1,
        //           percent_correct: history[i].right/(history[i].right+history[i].wrong+1),
        //           set_id: history[i].set_id
        //         }
        //         User.findOneAndUpdate({username:req.headers.username},
        //           {history: newHistory},
        //           {new:true}).then((us)=>{
        //             console.log(us)
        //           })
        //         found = true
        //       }
        //       break
        //     }
        //   }
        //Case where this word needs to be added to the history
        // if (!found){
        //   let newHistory = []
        //   // if (newHistory == undefined){
        //   //   newHistory = []
        //   // }
        //   newHistory = [...newHistory, {
        //     term: answer.term,
        //     right: (answer.correctness ? 1 : 0),
        //     wrong: (answer.correctness ? 0 : 1),
        //     percent_correct: (answer.correctness? 1: 0),
        //     set_id: answer.set_id
        //   }]
        //   User.findOneAndUpdate({username:req.headers.username},
        //     {history: newHistory},
        //     {new:true}).then((us)=>{
        //       // console.log(us)
        //   })
        // }

Above const data at the end
    /*
     * Dealing with the dailyquizHistory-schema first
     */

    // axios
    //   .post('https://my.api.mockaroo.com/generic_post.json?key=6b3bc3e0&__method=POST', req.body)
    //   .then(console.log('Succesfully sent to database'))
    //   .catch((err) => next(err));